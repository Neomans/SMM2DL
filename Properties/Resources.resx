<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="02" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        Qk02GwAAAAAAADYAAAAoAAAAQAAAACQAAAABABgAAAAAAAAAAADEDgAAxA4AAAAAAAAAAAAAAyFaAyFa
        AyJbBCJbAyFaBCJcBCReBiZhAyJbAiJbBSRgDiVcHyhTHipUHCdUHidWAiNbAyRcBCRdByhiCChiByhi
        BCRcAyFaAyFaAyFaAiJbAyFaBCReBCNdECZbHilUHSlVGyhTGCZaByVhAyNfAyNdAiJbAiNbAiNbAiNc
        BiZgCyheJipBGSU5GSY5GiY5GCU5HSc7BCFaAyFaBCNdBSReBiZhHydXIClTHSlVGyhTCyRbAiNcAyNc
        AiNbAiNbAyFaAyFaAiJbBCNdAyNdBSReBiZgBiZhAyJaBCJcBCNeBCNdDiVWEyhWFipVDiRZAyFaBCNd
        BiZiBiVgBCNcAyJbAyFaAyFaAyFaAyJaAiJbBCReBSReBSReCCZfEidVFClVFipVCiRcAyReAy5xAyFa
        AyFaAyFaAyFaBiVhBiViCyVZKSk+ICg6GyY3Gyc3GiU3Iys7ByNYAyNcBSReBSVfBiZgDiVaEiZVFClV
        FClWAyNdAyFaAyFaAyFaAyJeAyJcAyNcAyNcAyNdAiJbAyNcAyFaAyFaBSReBSRfAyFbBCNcFCZTIClO
        Ji5ODyRWBCNdBiRgBSRfBCJcAyFaAyFaAyFaAyFbAyNdAyNcAyRdAyNcAyNcAyJbAyFaHylPICpOJS1O
        ByNZBCNdAyFaAyFaAyFaAyJaBSRfBiVgBSRfCSJWIyQ6Jy87Iy05GiY8GiY0Hik3CydZAyNbBCRdAyJa
        BCJbESZaHyhOISpOISxQBCJcAyFaAyFaAyFZBCJcBCJaAiFaAyRcAiBYAiJaAyNcAyJaBCNdBSNfBCJc
        AyNbAyJbFiVRISlLISlLECRWBSRdBiNdAiBYAiBYAiBYAiBYAiBYAiFZAyFaAiJaAiJaAiBYAyNcAyNb
        AyJbHiZMISlLIClLCSNYBSJcAiBYAyJaBCJbBSNcBiReAyJbAiBYCCFUHyU2KC83JC02Iio5HCYxHCYz
        ByFTAiFZAyNcBCNbBSNdEiZaHSZLISlLHShOAyFaAiBZAyJbAyNbBSNcAiFYAiFXAiFWAyllBCReBSRd
        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
        GR4bFxsaHB4bHh8bHB4bHR4aDxcaFxshHiAaFBgaAhQgERcbHh4aGRwaGBofHRwdJSUoKjAqHyQhLzkv
        JCkllJylrLO8RlheRXyAPnV9HiYeMD4xJCwkIisiLDUrHiUfKjIqJCgkbHN4sba+cnR4HB4bCRYgFRok
        HRwcICEbKUZVIjNELk9aGx0aGRwZIjI3JURaLVJoGR8oFRwoFhwfIiAbHBsiBhYnDhsyEhkhHR4bGx4k
        FhwmHB8kIiEeISIbHB4aGRwcGh0ZGBwdHR0iGB0nExsmGx4eIB8aCRUiCxowCRYkGhsYHh8aGh0jGx4x
        KyQmJSMeLCsgLi8kICQiNm+oPH2/ME9jLlFjNFtuGyIfMDctLjIoHSAaLzQoIyUdLC4jJyYfHCErBxgm
        GxgeHRwaGB0iFx0pHSApExogJD9NLmiTJ0RbDy48CRIXBRIbJlN2KVZwHh8bHCAcHR8bJR4kBBYiBzdY
        CSZADxosHB0bGx4bICIcISMbHyAmDBYfBxUdChUcBhQeDxciHB8eHiAcHB8cHR8aDBceDB0xBz1eCyA3
        DxggHh8fICVFICRFIiI+Ix8rJh8gKiIcHxwaYGdwbHR+MzQ0LlN2HjBDKygjKCUZKyUbLCgiNTAlGxYR
        LSUeIh4mGx46JSxDDxMfGxUXHR8dKCsnIiMcEBodJ0VHJDY5FoOiIafSZYiITWpqXX6FK0dFIicpGx0g
        HB0cCxgkBhcjFB4nExskEhkkDRYdGBwbExocHyEbHR8jGB4nERolChchEBgkGh0mHR8aGRoeFhsaFhob
        AhQgEBomDxslExohChciGhsdGCAwER80Dx83DyA6ESI+FCM+FyhEeaHJscHToKChlJOUpqWmx8nMlJWV
        dnZ4YmVrlpaVs7S1u72/HCc7jJGbfH6BycrMlJSUqqurcHBxIyEfHCAdICMbIyQbJUZFJF99K1R1LD1H
        GBwZHR8bHB0dERklAhQeAhQeFRsfIh4hGBsbHR4kCBUfAxQdDBccIiMbIiMcHSEdGR0iGBwiFxwdGR0Z
        HR8bGRwfARMeAhQfDRchHx4gEBcaGxsaFhoiDhcdHh4bHRwiGBolERskDh0rDB8xESU2S2mGa4WhLEFR
        J1p/MmeKFE1oGVFtGUxrCzFLDi1EGzRJFCU0DCEyICcyGRsdJy8yEyEqDR0oGBwnICAbIiMbCRYbGB0b
        IiIbOHaLPICcIjEzHh8aFhoaBRMZARIcAxQdChcfIyMdHh8fEBgbHh8eFxkkBRQeAxQdCxcbHR8bISEc
        HB4aHh8bHB4aHh8aFBsdAxMbABIaARMbHR8jJiUcBxQbGhwZICEeDRYgFBkbHR0bHRggHhkaHhoZGxwX
        HyEec3mBjJGZOUlOOH6bLV1wGCAgFx8eGyAdHCIcGh8aFxoYGBoXGxkXFhghHxsgGh4cBhUeAxQgAxYp
        CRUcGBwb
</value>
  </data>
</root>